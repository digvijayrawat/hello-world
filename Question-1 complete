from matplotlib import pyplot as plt
import numpy as np

objective=[1,3]
constraint1=[10,5,4]
constraint2=[(1,2),(1,0),(0,1)]

class LPsolver():

    def solve(self,a,b,c):
        def f(coeffs,x):
            sum=0
            sum+=((x*coeffs[0])+(coeffs[1]))
            return sum
        for i in range(len(c)):
            if(c[i][1]==0):
                plt.plot([b[i],b[i]],[-2,max(b)],'k--')
                continue
            elif(c[i][0]==0):
                plt.plot([-2,max(b)],[b[i],b[i]],'k--')
                continue
            else:
                co=[((-1*c[i][0])/c[i][1]),(b[i]/c[i][1])]
                n=int((b[i]+2/c[i][0])/0.001)
                x_values=[-2]
                for j in range(1,n):
                    x_values.append(float(str(x_values[0]+(0.001*j))[:5]))
                x_values.append(b[i]/c[i][0])
                y_values=[f(co,q) for q in x_values]
                plt.plot(x_values,y_values,'k--')
        plt.plot([0,0],[-2,max(b)],'g')
        plt.plot([-2,max(b)],[0,0],'g')
        l_b=len(b)
        l_a=len(a)
        arr=np.array(c)
        arr=np.concatenate((arr,np.identity(len(b))),1)
        b=np.array(b)
        x=[0]*l_a

        arr=np.insert(arr,len(a)+l_b,b,1)
        B=np.array([0]*l_b)
        C=np.array(a+[0]*l_b)
        bx=list(range(l_a,l_a+l_b))
        while(1):
            for i in range(len(bx)):
                if bx[i]<l_a:
                    x[bx[i]]=arr[i,-1]
            plt.plot(x[0],x[1],'y o',markersize=10)
            
            maxpos=[]
            minpos=[]
            for i in range(l_a+l_b):
                maxpos.append(C[i]-np.dot(B,arr[:,i]))


            c=maxpos.index(max(maxpos))

            if maxpos[c]<=0:
                break
            for i in range(l_b):
                if arr[i,c]!=0:
                    minpos.append(arr[i,-1]/arr[i,c])
                else:
                    minpos.append(10000000000)
            q=filter(lambda x:x>0,minpos)
            if q==[]:
                return "unbounded function"
                break
            r=minpos.index(min(q))

            B[r]=C[c]
            bx[r]=c
            arr[r,:]=arr[r,:]/arr[r,c]
            for i in range(l_b):
                if(i!=r):
                    arr[i,:]=arr[i,:]-(arr[i,c]/arr[r,c])*arr[r,:]

        for i in range(len(bx)):
            if bx[i]<l_a:
                x[bx[i]]=arr[i,-1]
        plt.plot(x[0],x[1],'r o',markersize=10)
        plt.text(x[0],x[1],'  final answer!')
        x=list(map(int,x))
        
        x.append(sum([x[i]*a[i] for i in range(l_a)]))
        plt.xlabel("x - axis",fontsize=10)
        plt.ylabel("y - axis",fontsize=10)
        plt.title("SIMPLEX METHOD [dotted lines = constraints, yellow dots = answer per iteration]",fontsize=12)
        plt.show()
        return x


lps=LPsolver()
solution=lps.solve(objective,constraint1,constraint2)
print(solution)
