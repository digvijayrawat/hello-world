from matplotlib import pyplot as plt
class PolynomialSolver:
        def solve(self,order,coeffs,method):
            def f(x):
                sum=0
                for i in range(order+1):
                    sum+=coeffs[i]*(x**(order-i))
                return sum
            def plot(a,b):
                n=int((b-a+2)/0.001)
                x_values=[a-1]
                for i in range(1,n):
                    x_values.append(float(str(x_values[0]+(0.001*i))[:5]))
                x_values.append(b+1)
                y_values=[f(c) for c in x_values]
                plt.plot(x_values,y_values,[a,a],[0,f(a)],'r--o',[b,b],[0,f(b)],'r--o')
                plt.xlabel("x - axis",fontsize=20)
                plt.ylabel("y - axis",fontsize=20)
                plt.title("BISECTION METHOD-CURRENT INTERVAL",fontsize=30)
                line=plt.Line2D((a-1,b+1),(0,0),color='k')
                plt.gca().add_line(line)
                plt.show()
            if method=='bisection':
                l=int(input('Enter lower bound of interval in which root lies: '))
                u=int(input('Enter upper bound of interval in which root lies: '))
                max_it=7
                tolerance=float(input('Enter a tolerance value to define accuracy: '))
                while(abs(f(l)-f(u))>tolerance and max_it>0):
                    print(l,u,f(l),f(u))
                    plot(l,u)
                    m=(l+u)/2
                    if(f(l)*f(m)<0):
                        u=m
                    elif(f(m)==0):
                        l,u=m,m
                        plot(l,u)
                        print(m,f(m))
                        break
                    else:
                        l=m
                    max_it-=1
                return [l,u]
            if method=='secant':
                l=int(input('Enter lower bound of interval in which root lies: '))
                u=int(input('Enter upper bound of interval in which root lies: '))
                it=int(input('Enter maximum number of iterations: '))
                tolerance=float(input('Enter a tolerance value to define accuracy: '))
                while(abs(f(l))>tolerance and it>0):
                    f1=f(l)
                    f2=f(u)
                    l,u=u,u-(((u-l)*f2)/(f2-f1))
                    print (l,u,f1,f2)
                    it-=1
                return l
            if method=='secantRF':
                l=int(input('Enter lower bound of interval in which root lies: '))
                u=int(input('Enter upper bound of interval in which root lies: '))
                m=l
                it=int(input('Enter maximum number of iterations: '))
                tolerance=float(input('Enter a tolerance value to define accuracy: '))
                while(abs(f(m))>tolerance and it>0):
                    f1=f(l)
                    f2=f(u)
                    m=u-(((u-l)*f2)/(f2-f1))
                    fm=f(m)
                    if(f1*fm<0):
                        u=m
                    else:
                        l=m
                    print (m)
                    it-=1
                return l
            if method=='newtonraphson':
                x=float(input('Enter value for initialisation: '))
                max_iterations=int(input('Enter maximum number of iterations: '))
                tolerance=float(input('Enter tolerance: '))
                def derivative(x):
                    sum=0
                    for i in range(1,order+1):
                        sum+=(coeffs[i-1]*(order+1-i)*(x**(order-i)))
                    return sum
                def newtonraphsonmethod(f,x,max_iterations=20,tolerance=0.000001):
                    for i in range(max_iterations):
                        x1=x-(f(x)/derivative(x))
                        if abs(x1-x)<tolerance:
                            break
                        x=x1
                        print(x)
                    return x
                return newtonraphsonmethod(f,x,max_iterations,tolerance)
ps=PolynomialSolver()
print(ps.solve(2,[1,1,-2],"bisection"))
